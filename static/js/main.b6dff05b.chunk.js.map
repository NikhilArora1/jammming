{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","renderAction","addTrack","removeTrack","onAdd","track","onRemove","button","isRemoval","name","artist","album","TrackList","tracks","map","id","SearchResults","Playlist","handleNameChange","onNameChange","onSave","Spotify","url","window","location","href","token","match","expiresIn","setTimeout","history","pushState","fetchPromise","fetch","headers","Authorization","response","json","response_1","items","artists","uri","then","user","user_id","requestOptions","method","body","JSON","stringify","data","playlist_id","uris","App","searchResults","playlistName","playlistTracks","updatePlaylistName","savePlaylist","indexOf","item","push","filteredPlaylistTrack","filter","trackURIs","forEach","res","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6dff05b.chunk.js","sourcesContent":["const clientID = 'a7887fbb5e094b1cb979bd51362e6ee1';\nconst redirectURI = 'http://nikhil-arora.com/jammming/callback/';\nlet accessToken;\nexport const Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        } else {\n            const url = window.location.href;\n            const token = url.match(/access_token=([^&]*)/);\n            const expiresIn = url.match(/expires_in=([^&]*)/);\n            if (token && expiresIn) {\n                accessToken = token[1];\n                window.setTimeout(() => accessToken = '', expiresIn[1] * 1000);\n                window.history.pushState('Access Token', null, '/');\n            } else {\n                // access token is empty and not in url\n                window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            }\n        }\n    },\n\n    async search(term) {\n        const fetchPromise = fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: { Authorization: `Bearer ${accessToken}` }\n        });\n        const response = await fetchPromise;\n        const response_1 = await response.json();\n        const tracks = response_1.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n        }));\n        return tracks;\n    },\n\n    // search(term) {\n    //     const fetchPromise = fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n    //         headers: { Authorization: `Bearer ${accessToken}` }\n    //     });\n    //     return fetchPromise.then(response => {\n    //         return response.json();\n    //     }).then(response => {\n    //         const tracks = response.tracks.items.map(track => ({\n    //             id: track.id,\n    //             name: track.name,\n    //             artist: track.artists[0].name,\n    //             album: track.album.name,\n    //             uri: track.uri\n    //         }));\n    //         return tracks;\n    //     });\n    // }\n\n    savePlaylist(name, tracks) {\n        if (!name || !tracks) {\n            return;\n        }\n        const token = accessToken;\n        const headers = { Authorization: 'Bearer ' + token };\n\n        // get user id\n        fetch(`https://api.spotify.com/v1/me`, { headers: headers })\n            .then(response => response.json())\n            .then(user => {\n                const user_id = user.id;\n                const requestOptions = {\n                    method: 'POST',\n                    headers: headers,\n                    body: JSON.stringify({ name: name })\n                };\n                // create playlist\n                fetch(`https://api.spotify.com/v1/users/${user_id}/playlists`, requestOptions)\n                    .then(response => response.json())\n                    .then(data => {\n                        const playlist_id = data.id;\n                        const requestOptions = {\n                            method: 'POST',\n                            headers: headers,\n                            body: JSON.stringify({ uris: tracks })\n                        };\n                        // add songs to playlist\n                        fetch(`https://api.spotify.com/v1/users/${user_id}/playlists/${playlist_id}/tracks`, requestOptions)\n                            .then(response => response.json());\n                    });\n            });\n    }\n\n};\n","import React from 'react';\nimport './SearchBar.css'\n\nexport class SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { term: '' };\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(e) {\n        this.setState({ term: e.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Track.css';\n\nexport class Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.renderAction = this.renderAction.bind(this);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    render() {\n        const isRemoval = this.props.isRemoval;\n        let button;\n        if (isRemoval) {\n            button = <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\n        } else {\n            button = <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n        }\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {button}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Track } from '../Track/Track';\nimport './TrackList.css';\n\nexport class TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {/* You will add a map method that renders a set of Track components */}\n                {this.props.tracks.map(track => (\n                    <Track key={track.id} track={track} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />\n                ))}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './SearchResults.css';\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.tracks} onAdd={this.props.onAdd} isRemoval={false} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { TrackList } from '../TrackList/TrackList';\nimport './Playlist.css';\n\nexport class Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(e) {\n        const name = e.target.value;\n        this.props.onNameChange(name);\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input value={this.props.name} onChange={this.handleNameChange} />\n                <TrackList tracks={this.props.tracks} onRemove={this.props.onRemove} isRemoval={true} />\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { Playlist } from '../Playlist/Playlist';\nimport { Spotify } from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  componentDidMount() {\n    Spotify.getAccessToken();\n  }\n\n  addTrack(track) {\n    const playlistTracks = this.state.playlistTracks;\n    const index = playlistTracks.indexOf(item => item.id === track.id);\n    if (index === -1) {\n      playlistTracks.push(track);\n      this.setState({ playlistTracks: playlistTracks });\n    }\n  }\n\n  removeTrack(track) {\n    const filteredPlaylistTrack = this.state.playlistTracks.filter(item => item.id !== track.id);\n    this.setState({ playlistTracks: filteredPlaylistTrack });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackURIs = [];\n    this.state.playlistTracks.forEach(track => trackURIs.push(track.uri));\n    Spotify.savePlaylist(this.state.playlistName, trackURIs)\n    this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(res => this.setState({ searchResults: res }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              tracks={this.state.searchResults}\n              onAdd={this.addTrack} />\n            <Playlist\n              name={this.state.playlistName}\n              tracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}